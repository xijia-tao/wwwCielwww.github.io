<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Ciel&#39;s blog website &lt;3</title>
        <link>https://wwwCielwww.github.io/</link>
        <description>Recent content on Ciel&#39;s blog website &lt;3</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Fri, 20 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://wwwCielwww.github.io/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Japanese Language Study Notes</title>
        <link>https://wwwCielwww.github.io/p/jpn/</link>
        <pubDate>Fri, 20 May 2022 00:00:00 +0000</pubDate>
        
        <guid>https://wwwCielwww.github.io/p/jpn/</guid>
        <description>&lt;p&gt;This is where I take notes when learning Japanese. Sources are acknowledged in the beginning.&lt;/p&gt;
&lt;p&gt;Source: YouTube, &lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=8YV8KmfBbBM&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JapanesePod101.com&lt;/a&gt; [^], Duolingo [*]&lt;/p&gt;
&lt;h2 id=&#34;day-1&#34;&gt;Day 1^&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Japanese is a &amp;lsquo;mora-timed&amp;rsquo; language; syllables are pronounced equally.&lt;/li&gt;
&lt;li&gt;Japanese characters can represent a vowel, a consonant and a vowel or a single consonant sound.&lt;/li&gt;
&lt;li&gt;Word order: subject, object, verb, or SOV&lt;/li&gt;
&lt;li&gt;topic-prominent language
&lt;ul&gt;
&lt;li&gt;topic is the focus; usually omits the subject&lt;/li&gt;
&lt;li&gt;create basic sentences; object + verb&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;3 different scripts used to write Japanese
&lt;ul&gt;
&lt;li&gt;Hiragana ひらがな is used to write functional words and particles.&lt;/li&gt;
&lt;li&gt;Katakana カタカナ is used to write foreign words and names.&lt;/li&gt;
&lt;li&gt;Kanji 漢字 is used to write native Japanese words, or words of Chinese origin.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://wwwCielwww.github.io/p/jpn/hiragana.png&#34;
	width=&#34;979&#34;
	height=&#34;471&#34;
	srcset=&#34;https://wwwCielwww.github.io/p/jpn/hiragana_hu062ea9cd9441e9f6939075b8420a48cb_102579_480x0_resize_box_3.png 480w, https://wwwCielwww.github.io/p/jpn/hiragana_hu062ea9cd9441e9f6939075b8420a48cb_102579_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;207&#34;
		data-flex-basis=&#34;498px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wwwCielwww.github.io/p/jpn/katakana.png&#34;
	width=&#34;974&#34;
	height=&#34;471&#34;
	srcset=&#34;https://wwwCielwww.github.io/p/jpn/katakana_hu2371480a90a47ea6f184c2d902cf0386_79911_480x0_resize_box_3.png 480w, https://wwwCielwww.github.io/p/jpn/katakana_hu2371480a90a47ea6f184c2d902cf0386_79911_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;206&#34;
		data-flex-basis=&#34;496px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;day-2&#34;&gt;Day 2^&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: for writing Japanese on a PC, you can download Google Japanese IME, which can be more convenient than the Windows native IME. You can shift between Japanese and English with &lt;code&gt;Alt&lt;/code&gt; + &lt;code&gt;~&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;ありがとう&lt;/strong&gt; arigato1 - thank you&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;すみません&lt;/strong&gt; sumimasen - I&amp;rsquo;m sorry/excuse me&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;どこですか&lt;/strong&gt; - where is &amp;hellip;? Put place name before the phrase, e.g. 駅はどこですか？ホテルはどこですか？コンビニどこですか？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Why is は (ha) sometimes read as わ (wa)?&lt;/p&gt;
&lt;p&gt;は is only pronounced as wa when being used as topic marking particle or the end of a phrase, e.g. こんばんは (good evening), こんにちは (hello). But for instance, はる (春) is pronounced as haru.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The timing of each syllable is important. Syllables pronouncing with different time can have different meanings, e.g. おばあさん (grandma) and おばさん (aunt). To achieve the necessary pause, use a pause (つ) between syllables, e.g. きつて (stamp) and きて (please come).&lt;/p&gt;
&lt;p&gt;Pitch accent (intonation) can also lead to words with different meanings, e.g. は2し1 (chopsticks) and 橋 (ha1shi2, bridge).&lt;/p&gt;
&lt;h2 id=&#34;day-3&#34;&gt;Day 3*&lt;/h2&gt;
&lt;p&gt;Past tense: ました、ませんでした&lt;/p&gt;
&lt;p&gt;Present/future tense: ます、ません&lt;/p&gt;
&lt;p&gt;を can be used after the subject as a word proceeding quantitative term, e.g. りんごを２つ食べます&lt;/p&gt;
&lt;p&gt;be going to: に行きます&lt;/p&gt;
&lt;p&gt;(not) a lot should be put before the walk, e.g. 彼女はあまり踊りません&lt;/p&gt;
&lt;p&gt;Verbs (時々、いつも、よく) representing frequencies need not は、お、を after them when put in front of a sentence, e.g. 私はいつもスポーツが大好きです。私はいつも彼を愛します (strange, the particles after &lt;code&gt;sports&lt;/code&gt; and &lt;code&gt;him&lt;/code&gt; are different, should investigate later, &lt;a class=&#34;link&#34; href=&#34;https://youtu.be/UaI7UpOl-Xk&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;video&lt;/a&gt; to-watch on Japanese particles)&lt;/p&gt;
&lt;p&gt;は indicates the relationship with the subject, while が somehow decorates the subject.&lt;/p&gt;
&lt;p&gt;[x]から: from [x] 　[x]まで: to [x]&lt;/p&gt;
&lt;p&gt;どれくらいかかりますか？: how long will it take?&lt;/p&gt;
&lt;p&gt;駅からホテルまで車で五分くらいかかります: it takes about 5 minutes to go from the train station to the hotel by car.&lt;/p&gt;
&lt;h3 id=&#34;negative-い-adjectives&#34;&gt;Negative い-Adjectives&lt;/h3&gt;
&lt;p&gt;When い-adjectives are switched from positive to negative, they undergo a spelling change. The characteristic い-ending switches to a く、and the phrase meaning &amp;ldquo;not&amp;rdquo; is added to the end. The final result is an ending such as くないです。See the example below.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Sentence&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Translation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;これはおいしいです。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This is delicious.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;これは&lt;strong&gt;おいしくないです&lt;/strong&gt;。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This is &lt;strong&gt;not delicious&lt;/strong&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Just like with positive い-adjectives, all negative い-adjectives can drop the です ending in casual speech.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Sentence&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Translation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;これは&lt;strong&gt;おいしくない&lt;/strong&gt;。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This is &lt;strong&gt;not delicious&lt;/strong&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;To make the speech more formal, one can change the ending from くないです to くありません。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Sentence&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Translation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;これは&lt;strong&gt;おいしくありません&lt;/strong&gt;。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This is &lt;strong&gt;not delicious&lt;/strong&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;近くも遠くもないです: it is neither near nor far.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>COMP3360 Computer Animation Course Notes</title>
        <link>https://wwwCielwww.github.io/p/comp3360/</link>
        <pubDate>Mon, 16 May 2022 00:00:00 +0000</pubDate>
        
        <guid>https://wwwCielwww.github.io/p/comp3360/</guid>
        <description>&lt;p&gt;The post gives some keypoints on the course content of COMP3360 Computer Animation @HKU, 2021-22 semester 2. Since I wrote it as the cheat sheet for attending the final exam, some abbreviations for words (both technical and non-technical) were used, which might not be clear. You can also expect some strange formatting.&lt;/p&gt;
&lt;p&gt;Due to the limited time for exam preparation, I did not include the part on implicit integration and the second part of data-driven facial animation. I may (or may not) add them in the future as a separate note and attach the url here.&lt;/p&gt;
&lt;h1 id=&#34;comp3360-notes&#34;&gt;COMP3360 Notes&lt;/h1&gt;
&lt;h2 id=&#34;basics-of-computer-animation&#34;&gt;Basics of Computer Animation&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;joints (translational - 1,2,3; hinge - knee, 1; universal - wrist, 2; rotational - shoulder, hip, neck)
&lt;ul&gt;
&lt;li&gt;2 ways to represent 3D rotations: gimbal (3 motors, euler angle) &amp;amp; free joint&lt;/li&gt;
&lt;li&gt;gimbal lock: e.g. order = x-y-z, rotate y for 90 deg, same x &amp;amp; z axis, 1 dof lost&lt;/li&gt;
&lt;li&gt;free: ball joint, rotation by angle $\alpha$ around axis a $(a_xS\frac{\alpha}{2},a_yS\frac{\alpha}{2},a_zS\frac{\alpha}{2},C\frac{\alpha}{2})$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;generalized coordinates = (root location, root orientation, joint angles)&lt;/li&gt;
&lt;li&gt;homo coord trans: 4d matrix, LHS mul $\to$ world space, RHS $\to$ local space&lt;/li&gt;
&lt;li&gt;f kinematics: joint angles $\to$ position and orientation (of the end effector); ik&lt;/li&gt;
&lt;li&gt;interpolation: linear; high-order polynomial e.g. bezier - 2 end points, 2 control points for tangent vector
&lt;ul&gt;
&lt;li&gt;slerp for quaternions, $\theta=\arccos(q_1\cdot q_2), c_1=\frac{\sin\theta(1-t)}{\sin\theta}, c_2=\frac{\sin\theta t}{\sin\theta}$&lt;/li&gt;
&lt;li&gt;problems: constraints may not satisfied, error-propagation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;solution: ik - 3 approaches: analytical,
&lt;ul&gt;
&lt;li&gt;cyclic-coord descent: move up the hierarchy and move the next joint to min the distance between the end effector and the target; repeat until the ee reaches the target or max iterations reached (in case unreachable target) &lt;em&gt;may have oscillation problems&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;pseudo-inverse: &lt;em&gt;any topo structure, multiple constraints, incorporate physics&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;for small movements, linear $\Delta e=J\Delta q$&lt;/li&gt;
&lt;li&gt;pseudo inverse $J^+=(J^TJ)^{-1}J^T,\ \Delta q=J^+\Delta e$ (derived from lagrange multiplier)&lt;/li&gt;
&lt;li&gt;iteratively update the generalized coord so that position constraints are satisfied&lt;/li&gt;
&lt;li&gt;singularity problem: unreachable posture when all the joints are fully extended, then the system becomes unstable. solution:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;damped least squares: $J^+=J^T(JJ^T+k^2I)^{-1}$ by imposing soft constraints&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;motion-capture--physically-based-character-animation&#34;&gt;Motion Capture &amp;amp; Physically-Based Character Animation&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;motion capture
&lt;ul&gt;
&lt;li&gt;optical: reflective markers, 3D location computed by stereo vision; manually labelled first, tag again when occlusion, less intrusive, very accurate, capture motion + skin movement
&lt;ul&gt;
&lt;li&gt;joint center prediction: define coord system for each bone using markers, compute the trans matrix, $M_1v_1-M_2v_2=0$, solve with least squares&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;magnetic: location given by amplitude, no occlusion, no manual post-processing, less accurate (positios highly distorted, noise, no ~ devices), only 2-3m away&lt;/li&gt;
&lt;li&gt;inertial: measure $\Delta\omega$ (gyro sesnor) and $\Delta a$ to compute orientation and position, unlimited range, rapid accumulating errors, solution: periodically reset&lt;/li&gt;
&lt;li&gt;mechanical: need to additionally detect root location; video-based&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;physical: force (ma, coriolis, gravity) to body and torque to joints
&lt;ul&gt;
&lt;li&gt;f dynamics: input = force, output = a$\to$v, x (fall); id (punch)&lt;/li&gt;
&lt;li&gt;pd control: $-F=a(q-q_d)+c(q&amp;rsquo;+q&amp;rsquo;_d)$ for torque then switch (dance)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;forward--inverse-dynamics&#34;&gt;Forward / Inverse Dynamics&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;articulated bodies: force between joints, torque generated by motors at joints&lt;/li&gt;
&lt;li&gt;equation of motion $\tau=H\ddot{q}+C(q,\dot{q})+\tau_g$&lt;/li&gt;
&lt;li&gt;id: newton-euler - O(n), compute v, a from root to leaf with $q,\dot{q},\ddot{q}$,
&lt;ul&gt;
&lt;li&gt;eq of m $f_i^a=r\times F_{ext}+\tau=I\dot{\omega}+\omega\times I\omega$ with $\omega:=v$&lt;/li&gt;
&lt;li&gt;compute joint forces from leaf to root $f_{i+1}=f_i^a-f_i^{ext}+\sum_{j\in c(i)}f_j$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;fd: recursive n-e - O(n3), use id solver to compute $C(q,\dot{q})+\tau_g$ then H&lt;/li&gt;
&lt;li&gt;fd: articulated body inertia - O(n), compute $I^A,P$ from leaf to root, then $\ddot{q},a$ from root to leaves&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;motion-synthesis-by-optimization--editing&#34;&gt;Motion Synthesis by Optimization / Editing&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;optimization problems: high dimensionality, local extrema&lt;/li&gt;
&lt;li&gt;fd: hard to find good initial motion, need to keep balance; id: need good objective function&lt;/li&gt;
&lt;li&gt;motion warping (small, avoid obstacles): add offset to satisfy constraints, insert a keyframe&lt;/li&gt;
&lt;li&gt;motion editing by ik: ee trajectory, $\dot{q}=J^+\dot{x}+(I-J^+J)y$, null space term -&amp;gt; redundant dof &amp;amp; to do secondary tasks&lt;/li&gt;
&lt;li&gt;motion blending: to synchronize motions, dtw - similarity matrix by diff of postures, find shortest path from lb to rt; can also be used to search similar motion clips&lt;/li&gt;
&lt;li&gt;motion style editing: fourier analysis on 2 motions then interpolate&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;learning-human-motion&#34;&gt;Learning Human Motion&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;map between control signal to entire pose: radial basis fs, find coefficients given data pairs
&lt;ul&gt;
&lt;li&gt;gaussian processes for better interpolation in the middle&lt;/li&gt;
&lt;li&gt;solve linear system/optimize hyperparameters with knn is costly&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;matching: need to carefully select search feature, no learning happens&lt;/li&gt;
&lt;li&gt;dl: learn prior of motion data with temporal conv AE, temporal invariance&lt;/li&gt;
&lt;li&gt;ambiguity: e.g. foot contact, auto label with foot speed &amp;amp; height, use small nn to map trajectories to contact durations and freq&lt;/li&gt;
&lt;li&gt;motion editing: csp over hidden units&lt;/li&gt;
&lt;li&gt;whole process: disambiguation $\to$ motion synthesis $\to$ motion editing&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;learning-rt-controllers-from-mocap&#34;&gt;Learning RT Controllers from MoCap&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;classic: finite state machine, motion graphs $\to$ manual works, all motions in memory&lt;/li&gt;
&lt;li&gt;matching: search online, no pre-comp, still slower with large database $\to$ get stuck&lt;/li&gt;
&lt;li&gt;lstms: good control signal and architecture to avoid ambiguity in the future, motion smoothed out with avg poses, response to inputs can be slow&lt;/li&gt;
&lt;li&gt;phase-functioned nn: additional inputs for trajectory $\to$ remove ambiguity, produce transitions between diff styles&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;physics-based-animation&#34;&gt;Physics-based Animation&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;$v=\dot{x}+\omega\times r$, $L=\sum_i m_ir_i\times(\omega\times r_i)=I\omega$, dL/dt=torque, $I=\sum mr^*r^{*T}=RI_0R$&lt;/li&gt;
&lt;li&gt;cons of mass-spring: depends on the set-up of the spring network, spring constants difficult to tune, volumetric effects cannot be captured directly (vol conservation, prevention of vol inversions)&lt;/li&gt;
&lt;li&gt;hyperelastic: independence of the strain energy on the prior deformation history.\&lt;/li&gt;
&lt;li&gt;deformation gradient F (Jacobian of $\phi$) $\to$ express strain energy, first PK stress tensor, &amp;hellip;&lt;/li&gt;
&lt;li&gt;constitutive model: math description of physical traits, eqs relate stimuli (deform) to material response (force stress)&lt;/li&gt;
&lt;li&gt;isotropic: resistance to deform same along all orientations $\iff \Psi(FQ)=\Psi(F)$&lt;/li&gt;
&lt;li&gt;rotational invariance $\iff \Psi(RF)=\Psi(F)$&lt;/li&gt;
&lt;li&gt;SVD$\to\Psi({F})=\Psi({U}{\Sigma}{V}^T)=\Psi({\Sigma})$ contains 3 singular values, write invariants in terms of them&lt;/li&gt;
&lt;li&gt;pros with $I$s: more intuitive about flavor and severity, assume rot inv, easy to compute derivatives, no tendency to collapse&lt;/li&gt;
&lt;li&gt;cons: SVD, chain rule to compute P from $\Psi$, derivatives non-linear/inverse mat cal $\to$ costly&lt;/li&gt;
&lt;li&gt;linear elasticity, St. Venant-Kirchhoff model, corotated linear elasticity, isotropic materials and invariants, and neohookean elasticity.&lt;/li&gt;
&lt;li&gt;TODO: implicit integration&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;crowd-simulation&#34;&gt;Crowd Simulation&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;flocking: separation, alignment, cohesion, avoidance, with simple rules&lt;/li&gt;
&lt;li&gt;behavior model, a hand-tuned controller (grow if) + modules to synthesize behaviors $\uparrow$&lt;/li&gt;
&lt;li&gt;patch (shape+motion)-based, associate motions with objects, create scenes by building blocks&lt;/li&gt;
&lt;li&gt;pros: efficient data handling, decentralized $\implies$ scalable, crowd patches&lt;/li&gt;
&lt;li&gt;velocity obstacle; rvo: avg of v outside vo and current v - no oscillation, no globa comm needed between agents, can handle multiple agents (cal all rvo)&lt;/li&gt;
&lt;li&gt;continuum crowds: solve both path-plan and coll-avoid
&lt;ul&gt;
&lt;li&gt;compute potential field (given other avatars, obstacles and the goal), determine movement, update field&lt;/li&gt;
&lt;li&gt;group by the inputs, efficient if few groups&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;supervised learning: track crowd behaviors in video with cv techniques $\to$ s-a pairs
&lt;ul&gt;
&lt;li&gt;state: vel, neighbor~ formation (temporal?), intention (from avg motion), pivots&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;probabilistic model: find clusters of diff behaviors in neighbor~, regression within a sel cluster (s.t. motion does not switch often)&lt;/li&gt;
&lt;li&gt;high-level: first fsm then model; follow trajectory: blend motion in diff curvatures&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;skinning&#34;&gt;Skinning&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;linear blend skinning: a vertex belongs to multiple bones $v=\sum_i w_iM_i&amp;rsquo;M_i^{-1}v_g$&lt;/li&gt;
&lt;li&gt;dual quaternions used to blend rigid trans, without volume loss at extreme joint angles&lt;/li&gt;
&lt;li&gt;rot: $q=C\frac{\theta}{2}+nS\frac{\theta}{2}, v&amp;rsquo;=qvq^*$; dual: $\hat{a}=a_0+\epsilon a_{\epsilon}$ with $\epsilon^2=0$&lt;/li&gt;
&lt;li&gt;a0 rot; ae trans: $1+\frac{\epsilon}{2}(ai+bj+ck)$; coord: $1+\epsilon(v_0i+v_1j+v_2k)$&lt;/li&gt;
&lt;li&gt;matrix for each bone by fk, convert to dual, normalize, cal global pos $\hat{q}\hat{v}\bar{\hat{q}^*}$&lt;/li&gt;
&lt;li&gt;anatomical: muscles contract when joints bent, dist decreases, vol pump up, skin deformed&lt;/li&gt;
&lt;li&gt;data-driven: template model + body shape + pose offsets&lt;/li&gt;
&lt;li&gt;body = 21,000D point $\to$ subtract mean and do pca&lt;/li&gt;
&lt;li&gt;rest pose v T 3N, joint loc J 3K, blend weights W NxK, pose params $\theta$ 3K; offset to rest pose then LBS&lt;/li&gt;
&lt;li&gt;smpl: $T(\theta)=T+B_p(\theta),B_p(\theta)=\sum_i f_i(\theta)P_i$ , Pi = vec of displacements in actual poses&lt;/li&gt;
&lt;li&gt;$f(\theta)$ linear in rot mat but non-linear in pose; $M(\theta,\beta;T,S,P,W,J)$&lt;/li&gt;
&lt;li&gt;trained to min surface reconst error&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;facial-animation&#34;&gt;Facial Animation&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;geometry and texture data, fit a generic face mesh into the range data using feature points&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;skin, fat, muscles: mass-spring, need to preserve volume - push node upwards&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;animation: with anatomical model, muscles activated to overlap markers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cons of musculoskeletal model: quality depends on model (muscle details, soft materials, muscle activation); below: expression cloning, cal corr with RBF&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wwwCielwww.github.io/p/comp3360/express-clone.png&#34;
	width=&#34;638&#34;
	height=&#34;466&#34;
	srcset=&#34;https://wwwCielwww.github.io/p/comp3360/express-clone_hu13b24fb2d0bebbb768444094c4810f7b_64474_480x0_resize_box_3.png 480w, https://wwwCielwww.github.io/p/comp3360/express-clone_hu13b24fb2d0bebbb768444094c4810f7b_64474_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;136&#34;
		data-flex-basis=&#34;328px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;amend motion vectors: rot adjusted by diff of normal vectors between src and tgt; mag scaled by local size variation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;deformation transfer: mesh-based, can do non-rigid deform; first cal deform for every src triangle, then cal mapping from src to tgt, apply deform to tgt triangles&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;this leads to holes in result mesh as too many dof; solve by preserve consistency: $\min\sum_j \norm{S_{s_j}-T_{t_j}}^2$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;photometric cap: find 3D location with stereo vision, normal vectors added as details&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;blendshapes: face ik - $\min\sum(c_f-c&amp;rsquo;&lt;em&gt;f)^2$ subject to $\sum c_fs&lt;/em&gt;{l,f}=p_l$ and $\sum c_f$=1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;impossible hard constraints $\to$ unstable results; sol: change $p_l$ to soft and min diff&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;local control to create more, e.g. asymmetric expressions not from symmetric&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;digital emily: take img under diff lighting, create reflectance model $\to$ polarization, reconstruct 3D geometry, produce facial rig, create animation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;diffuse (directional, no dep on cam angle) $I_pk_d\cos\theta$+ specular (highlights, no dep on color) $I_pk_s(\cos\alpha)^n$ reflection&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;parallel polarizer passes specular + part diffuse; cross passes part diffuse&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>COMP2120 Computer Organization Course Notes</title>
        <link>https://wwwCielwww.github.io/p/comp2120/</link>
        <pubDate>Sun, 15 May 2022 00:00:00 +0000</pubDate>
        
        <guid>https://wwwCielwww.github.io/p/comp2120/</guid>
        <description>&lt;p&gt;The post gives some keypoints on the course content of COMP2120 Computer Organization @HKU, 2021-22 semester 2. Since I wrote it as the cheat sheet for attending the final exam, some abbreviations for words (both technical and non-technical) were used, which might not be clear. You can also expect some strange formatting.&lt;/p&gt;
&lt;h1 id=&#34;comp2120-notes&#34;&gt;COMP2120 Notes&lt;/h1&gt;
&lt;h2 id=&#34;evolution&#34;&gt;Evolution&lt;/h2&gt;
&lt;p&gt;Benchmarks: MIPS, MFLOPS; measure the time required to do some real jobs - SPECmarks&lt;/p&gt;
&lt;h2 id=&#34;digital-logic&#34;&gt;Digital Logic&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;any logic expression can be written with only NAND or NOR
&lt;ul&gt;
&lt;li&gt;$\bar{A}\equiv A\text{ NAND } A$&lt;/li&gt;
&lt;li&gt;$A.B\equiv \overline{A\text{ NAND } B}$&lt;/li&gt;
&lt;li&gt;$A+B=\bar{A}\text{ NAND } \bar{B}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;minterm: AND of terms - exactly one 1 in its truth table&lt;/li&gt;
&lt;li&gt;cpu any logic expression can be written as a sum of minterms (sum of products)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://wwwCielwww.github.io/p/comp2120/logic-gates.png&#34;
	width=&#34;548&#34;
	height=&#34;600&#34;
	srcset=&#34;https://wwwCielwww.github.io/p/comp2120/logic-gates_hu7b93b990aa4f3dbbc173a355f34f861d_206331_480x0_resize_box_3.png 480w, https://wwwCielwww.github.io/p/comp2120/logic-gates_hu7b93b990aa4f3dbbc173a355f34f861d_206331_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;91&#34;
		data-flex-basis=&#34;219px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wwwCielwww.github.io/p/comp2120/logic-circuit.png&#34;
	width=&#34;919&#34;
	height=&#34;602&#34;
	srcset=&#34;https://wwwCielwww.github.io/p/comp2120/logic-circuit_hu28b9f45ba6e3dc5efad0acdb3e70b18e_121597_480x0_resize_box_3.png 480w, https://wwwCielwww.github.io/p/comp2120/logic-circuit_hu28b9f45ba6e3dc5efad0acdb3e70b18e_121597_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;152&#34;
		data-flex-basis=&#34;366px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;number--arithmetic&#34;&gt;Number &amp;amp; Arithmetic&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;from radix 10: find all digits by repeated dividing the quotient by $r$
&lt;ul&gt;
&lt;li&gt;for fractional numbers, multiply by $r$ and get the integral part&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;between radix 2, 8 and 16: group by 3 (oct) or 4 (hex) binary digit together&lt;/li&gt;
&lt;li&gt;represent ingsigned numbers
&lt;ul&gt;
&lt;li&gt;$f(\text{bit pattern}) = \text{value}$, where value can be positive, negative, char, etc.&lt;/li&gt;
&lt;li&gt;excess $2^{m-1}$
&lt;ul&gt;
&lt;li&gt;divide the range into two halves&lt;/li&gt;
&lt;li&gt;$\text{value}=\text{bit pattern}-(2^{m-1}-1)\in[-2^{m-1}+1,2^{m-1}]$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;one&amp;rsquo;s complement
&lt;ul&gt;
&lt;li&gt;+N= bit pattern, -N = inverting bit pattern of +N = $(2^n-1)-N\in[-2^{n-1}+1,2^{n-1}]$&lt;/li&gt;
&lt;li&gt;-N&amp;rsquo;s bit pattern has MSB=1&lt;/li&gt;
&lt;li&gt;problems: 2 zeros, arithmetic&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;two&amp;rsquo;s complement
&lt;ul&gt;
&lt;li&gt;add 1 to negative bit pattern = $2^n-N\in[-2^{n-1},2^{n-1}-1]$&lt;/li&gt;
&lt;li&gt;arithmetic: add together and discard any carry from the MSB&lt;/li&gt;
&lt;li&gt;sign extension: add additional bit positions to the left and fill in with the value of the original sign bit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;floating point: sign S, biased exponent E, significand M (mantissa)
&lt;ul&gt;
&lt;li&gt;+ve/-ve overflow/underflow&lt;/li&gt;
&lt;li&gt;actual value = $(-1)^S\times1.M\times2^{E-127}$ (single precision,  bit of exponent = 8)&lt;/li&gt;
&lt;li&gt;not all can be represented precisely (e.g. 0.2), different order may yield different results&lt;/li&gt;
&lt;li&gt;addition: right shift M of number with smaller E, normalize the result&lt;/li&gt;
&lt;li&gt;multiplication: subtract bias in exponent&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;multiplication of signed operand:
&lt;ul&gt;
&lt;li&gt;perform normal multiplication, except that if the partial sum is negative, need to sign-extend the number to
become a negative double precision number. This is done except the sign bit.&lt;/li&gt;
&lt;li&gt;If sign bit = 0, do nothing, else take complement of multiplicand and sign extend. Add this to the partial sum.&lt;/li&gt;
&lt;li&gt;Ignore carry out during addition.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Adder:
&lt;ul&gt;
&lt;li&gt;half-adder (2 inputs, 2 outputs) full-adder (3 inputs, 2 outputs)&lt;/li&gt;
&lt;li&gt;add n-bit numbers: ripple adder (slow), carry look-ahead adder, carry-save adder&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;execution&#34;&gt;Execution&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2 basic cpu operations: data movement, data proccessing with ALU&lt;/li&gt;
&lt;li&gt;an instruction is usually 32-bit (4 bytes) word&lt;/li&gt;
&lt;li&gt;instruction fetch: MAR $\leftarrow$ PC; IR $\leftarrow$ mem[MAR]&lt;/li&gt;
&lt;li&gt;operand fetch, execute **&lt;/li&gt;
&lt;li&gt;interrupt&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;memory&#34;&gt;Memory&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;RAM (the only volatile of all)
&lt;ul&gt;
&lt;li&gt;dynamic: transistors to store charges by capacitance effect, need refreshing, slower, 1 transistor per bit, much cheaper and hence more memory&lt;/li&gt;
&lt;li&gt;static: logic gates to store data (latch), faster, used in cache memory&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ROM
&lt;ul&gt;
&lt;li&gt;ROM/PROM: cannot change content.&lt;/li&gt;
&lt;li&gt;EPROM: content of entire chip can be erased by UV lights.&lt;/li&gt;
&lt;li&gt;EEPROM: can be erased by using electric current (but slow)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Flash memory
&lt;ul&gt;
&lt;li&gt;faster than EEPROM in writing, used in handheld device/mobile phones&lt;/li&gt;
&lt;li&gt;storing BIOS of PC, used as SSD, limited number of write cycles&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;performance: access time, memory cycle time, transfer rate; throughput&lt;/li&gt;
&lt;li&gt;memory byte ordering: big Endian (left-to-right) / little for multiple byte data&lt;/li&gt;
&lt;li&gt;error detection: a single parity bit, chosen such that #1 in the bit pattern (inc itself) is even (even parity)&lt;/li&gt;
&lt;li&gt;principle of locality: memory reference tends to be localized (e.g. code, small arrays, blocks of local variables in a subprogram)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cache&#34;&gt;Cache&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;mapping: 32-bit address [block id] [cache set no.] [offset in block]&lt;/li&gt;
&lt;li&gt;e.g. 128kb cache memory, 2-way set associative, cache line (block) size = 64b
&lt;ul&gt;
&lt;li&gt;no. cache lines = 2048, no. sets = 1024&lt;/li&gt;
&lt;li&gt;given address 346b2a70 (16, 10, 6 bits), set number = 10 bits = 169&lt;/li&gt;
&lt;li&gt;matching id = 16 bits to match against the 2 tags in set number 169&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;direct-map organization (1 cache line)
&lt;ul&gt;
&lt;li&gt;pro: no need to perform selection (requires logic, logic gates need time to run), so faster&lt;/li&gt;
&lt;li&gt;con: multiple memory blocks mapped to the same cache set, maybe needed by the running program at the same time (i.e. code and data) hence result in many cache misses&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;k-way set associative: need to compare the tags of cache lines with the block-id of the address&lt;/li&gt;
&lt;li&gt;replacement: FIFO, LRU&lt;/li&gt;
&lt;li&gt;write: need to maintain data consistency between cache and main memory
&lt;ul&gt;
&lt;li&gt;write through: when writing cache, also write main memory
&lt;ul&gt;
&lt;li&gt;difficult to manage when need to access memory (e.g. cache miss) if the previous write has not finished yet&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;write back: write back only when it is replaced
&lt;ul&gt;
&lt;li&gt;inconsistent $\to$ difficult to manage when need I/O operation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;unified cache: memory contention problem on parallel and pipeline execution of instructions&lt;/li&gt;
&lt;li&gt;e.g. 512 words cache, 2-way, block size = 64, LRU, cache hit time = 10ns, 4 words in parallel, burst mode: first 4 words 60ns, subsequent 4 words 12ns, each block 24 references on avg
&lt;ul&gt;
&lt;li&gt;miss penalty = 60 + 15 * 12 = 240ns; no. blocks = 8; no. sets = 4&lt;/li&gt;
&lt;li&gt;0 1 2 5 3 2 5 3 11 7 9 0 6 0 7 9 8 7 9 11 12 2 4 5 12 15 12 13 15&lt;/li&gt;
&lt;li&gt;final content: &lt;code&gt;[[12,4],[13,5],[2,6],[15,11]]&lt;/code&gt; total cache misses = 14&lt;/li&gt;
&lt;li&gt;no. blocks accessed = 29; no. memory access = 29 x 24 = 696&lt;/li&gt;
&lt;li&gt;cache hit rate = 1 - 14/696 = 97.88% avg access time = 14.8ns&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;external&#34;&gt;External&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;magnetic disks&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;platters, which have circular tracks, which have sectors&lt;/li&gt;
&lt;li&gt;synch byte (id, data), information, crc (error detection)&lt;/li&gt;
&lt;li&gt;all the r/w head moves together; tracks of different platter under the head -&amp;gt; cylinder&lt;/li&gt;
&lt;li&gt;access time: (a) seek: move head from one cylinder to another (b) rotational delay: avg latency = half a revolution (c) data transfer time &amp;laquo; seek + latency&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RAID: redundant array disks, appeared as a single hard disk to the system, allow parallel op&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;efficient for block, nonredundant &lt;code&gt;[[0,4,8],[1,5,9],[2,6,10],[3,7,11]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;duplicate (mirrored), fault tolerant, either copy can be used during reading, hence reduced seek time&lt;/li&gt;
&lt;li&gt;hamming code in extra HDDs, expensive&lt;/li&gt;
&lt;li&gt;extra HDD contains parity bit, easily reconstruct the content of one failed HDD&lt;/li&gt;
&lt;li&gt;block level parity&lt;/li&gt;
&lt;li&gt;block level distributed parity, commonly used in NAS&lt;/li&gt;
&lt;li&gt;level 5 with 2 parity strips calculated using different method&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;solid state drives: limited number of write cycles; advantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;high-performance i/o, durability - less susceptible to physical shock and libration&lt;/li&gt;
&lt;li&gt;longer lifespan and lower power consumption since no mechanical&lt;/li&gt;
&lt;li&gt;quieter and cooler operation; lower access time&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;io&#34;&gt;I/O&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;asynchronous communication as large speed variation&lt;/li&gt;
&lt;li&gt;cpu controls the operation of the io devices by w/r the data and status/control registers&lt;/li&gt;
&lt;li&gt;dedicated io ports if io instructions provided in cpu / more often in memory map&lt;/li&gt;
&lt;li&gt;programmed io: cpu-&amp;gt;io, io-&amp;gt;cpu repeatedly until, io-&amp;gt;cpu, cpu-&amp;gt;memory&lt;/li&gt;
&lt;li&gt;interrupt-driven io: issue command, continue, io interrupt when it finishes, suspend, execute, return
&lt;ul&gt;
&lt;li&gt;interrupt: put PC, flag registers and other registers used into the stack (in memory); restore with return&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;dma: minimize cpu intervention with intelligent device controller (io processor)
&lt;ul&gt;
&lt;li&gt;when cpu and io processor want to write to memory at the same time&lt;/li&gt;
&lt;li&gt;steal cycles: io issues signal to tell cpu to disconnect from buses, which io then controls&lt;/li&gt;
&lt;li&gt;cpu will see an elongated clock, in which io r/w the memory&lt;/li&gt;
&lt;li&gt;when finishes, remove the signal and the clock returns to normal&lt;/li&gt;
&lt;li&gt;note that it causes cpu to execute at a slower rate; io notifies cpu by the end of an entire io operation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;instruction&#34;&gt;Instruction&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://wwwCielwww.github.io/p/comp2120/address-mode.png&#34;
	width=&#34;710&#34;
	height=&#34;332&#34;
	srcset=&#34;https://wwwCielwww.github.io/p/comp2120/address-mode_hu028d5edb0ae5d26b5aa7ba1211ae7e1d_320435_480x0_resize_box_3.png 480w, https://wwwCielwww.github.io/p/comp2120/address-mode_hu028d5edb0ae5d26b5aa7ba1211ae7e1d_320435_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;213&#34;
		data-flex-basis=&#34;513px&#34;
	
&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;XOR R1,R1,R1 ;init R1 to 0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;MOV #A,R2 ;R2=addr of array A
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;MOV #1024,R3 ;R3=size of array
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;LOOP: ADD R1,(R2),R1 ;R1=R1+(R2)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ADD R2,#4,R2 ;incr R2 to next elt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SUB R3,#1,R3 ;decrement R3
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;BNE LOOP ;if result!=0 branch
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;XOR R2,R2,R2 ; init R2=0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;MOV #1024, R3 ; init R3=size
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;LOOP: MOV A(R2), R4 ; A=start addr of A[]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;MOV B(R2), R5 ; B=start addr of B[]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;OR R4, R5, R6
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;MOV R6, A(R2)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ADD R2,#4,R2 ; increase R2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SUB R3,#1,R3
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;BNE LOOP
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;alp&#34;&gt;ALP&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.data
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;a: .asciiz &amp;#34;This is a test&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# zero-terminated string
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.text
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;main: sub r9,r9,r9 # r9=0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;loop: lb a(r9),r10 # load byte
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;beq r10,#0,exit # r10==0? end of string
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;call capitalize # call capitalize
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sb r10, a(r9) # store result back
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;add r9,1,r9 # incr r9, next char
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;br loop # goto loop
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;exit: ret # return
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Capitalize:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;push r8; push r9
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ld #0x61,r8 #r8=’a’
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ld #0x7a,r9 #r9=’z’
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;blt r10,r8,ret1; bgt r10,r9,ret1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sub r10,#0x20,r10 #0x20=’a’-’A’
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ret1: pop r9; pop r8; ret 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;os&#34;&gt;OS&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;os is a software that controls the execution of programs on a processor and manages the processor’s resources.&lt;/li&gt;
&lt;li&gt;user interface: cmi, program execution, file manipulation&lt;/li&gt;
&lt;li&gt;interface to programs: os calls (special instructions) e.g. file open/close, r/w&lt;/li&gt;
&lt;li&gt;services provided by os: program creation &amp;amp; execution, io access, file system management, system access, error detection and response, accounting&lt;/li&gt;
&lt;li&gt;protection scheme: user &amp;amp; kernel mode; system has to change to kernel mode to run/use the protected resources. OS functions accessed via system calls (special entry points)&lt;/li&gt;
&lt;li&gt;cpu multitasking e.g. perform io, stop execution, next; queue of processes (many factors)&lt;/li&gt;
&lt;li&gt;mapping from logical addresses of programs to physical addresses of memory, done by MMU&lt;/li&gt;
&lt;li&gt;paging: logical &amp;amp; physical -&amp;gt; pages, each process own logical ~ and page table (map)
&lt;ul&gt;
&lt;li&gt;each pte contains v(in memory or not), p(protection mode), d(if page been changed)&lt;/li&gt;
&lt;li&gt;table cached in tlb; MMU performs address translation &amp;amp; protection checking (e.g. fetch required page from hard disk to memory and restart program)&lt;/li&gt;
&lt;li&gt;when program starts, nothing in memory -&amp;gt; many page faults at start until a stable working set, use prepaging to bring in some pages at start&lt;/li&gt;
&lt;li&gt;address translation: (a) extract logical page no. (most sig n-bits); (b) find corre pte and see if page is in physical memory; (c) yes then get frame no. &amp;amp; append offset; no then page fault&lt;/li&gt;
&lt;li&gt;fault handling: (a) page from hard disk (b) find a free page in physical / replace (c) if dirty then write back (d) invalid that pte (e) write the page to that physical page (f) modify its pte&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;cache + vm: address translation via tlb, the cache of page table
&lt;ul&gt;
&lt;li&gt;if pte not in tlb, then use the page table and put it into tlb&lt;/li&gt;
&lt;li&gt;obtain the physical address; use it to access cache memory; cache miss handling&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;processor&#34;&gt;Processor&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;to generate control signals&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hardwired*: logic gates designed with truth table, faster, simpler instruction set&lt;/li&gt;
&lt;li&gt;microprogrammed: signals and truth table stored in memory, simple design, easy to modify&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3 stages instruction execution cycle:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fetch instruction&lt;/li&gt;
&lt;li&gt;decode instruction&lt;/li&gt;
&lt;li&gt;instruction execution: calculate operand addresses*
&lt;ul&gt;
&lt;li&gt;fetch operands from registers/memory; execute instruction*; write operand&lt;/li&gt;
&lt;li&gt;*can be combined as ld/st do not need to &amp;ldquo;execute&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;e.g. ADD A, B, C absolute addressing -&amp;gt; 4 words, read next word to get address&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pipeline: increase the throughput&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;branch/interrupt -&amp;gt; update pc and empty pipe&lt;/li&gt;
&lt;li&gt;no CO stage -&amp;gt; 5-stage pipeline&lt;/li&gt;
&lt;li&gt;resources required by each stages should not overlap, otherwise duplicate resources needed: e.g.
&lt;ul&gt;
&lt;li&gt;dedicated incrementer for PC instead of using ALU; multiple internal buses&lt;/li&gt;
&lt;li&gt;separate read port for data and instruction, or separate instruction and data cache&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;for an ideal pipeline, each instruction 5 stages 5 clock cycles, throughput = 1 instruction/clock cycle&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pipeline hazards: situations that prevent the next instruction from entering pipeline&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;resource hazard: conflict, e.g. PC inc and ALU operation; two multiply&lt;/li&gt;
&lt;li&gt;data hazard: data dependency on the result of previous instructions
&lt;ul&gt;
&lt;li&gt;re-arrange if possible: insert instructions in between; data forwarding&lt;/li&gt;
&lt;li&gt;only RAW types occur in a pipeline; others occur in parallel systems&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;control hazard: branch, call, etc. don&amp;rsquo;t know where to continue until it finishes
&lt;ul&gt;
&lt;li&gt;branch prediction: continue execution only 1 of 2 paths, correct prob = 50%&lt;/li&gt;
&lt;li&gt;can always write back to register/memory if wrong; higher prob for for-loop&lt;/li&gt;
&lt;li&gt;dynamic branch prediction: change decision when 2 consecutive wrong predictions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;performance: execution time = instruction cnt x cpi x clock cycle time&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;more effective pipelining -&amp;gt; higher throughput -&amp;gt; smaller cpi&lt;/li&gt;
&lt;li&gt;multiple instruction execution unit; large register file -&amp;gt; reduce memory access -&amp;gt;higher speed&lt;/li&gt;
&lt;li&gt;simplified instruction set -&amp;gt; reduce the need for microprograms, which is slower than hardware&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;modern processors: register-register except ld and st;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;fixed length and simple, fixed format instructions;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;few operations and addressing modes, simple cpu -&amp;gt; simple implementation -&amp;gt; faster clock rate, more efficient pipeline as less cases to consider&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;hardwired instead of microprog control; eliminate effect of pipeline hazards with soft &amp;amp; hardwares&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rely on optimizing compiler to enhance system performance, e.g. register allocation&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>COMP3270 Artificial Intelligence Course Notes</title>
        <link>https://wwwCielwww.github.io/p/comp3270/</link>
        <pubDate>Wed, 11 May 2022 00:00:00 +0000</pubDate>
        
        <guid>https://wwwCielwww.github.io/p/comp3270/</guid>
        <description>&lt;p&gt;The post gives some keypoints on the course content of COMP3270 Artificial Intelligence @HKU, 2021-22 semester 2. It can be used as a directional material for those who are interested in (the more traditional side of) AI, or for revision purposes to future attendants of this course.&lt;/p&gt;
&lt;h2 id=&#34;search&#34;&gt;Search&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;uninformed search (BFS, DFS, UCS)&lt;/li&gt;
&lt;li&gt;informed search (greedy, A*)
&lt;ul&gt;
&lt;li&gt;A* TSA is optimal iff admissible&lt;/li&gt;
&lt;li&gt;A* GSA is optimal iff consistent (which implies admissible)&lt;/li&gt;
&lt;li&gt;consistency: h(a) - h(c) &amp;lt;= cost(a to c) / f value (sum) along a path never decreases&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;local search
&lt;ul&gt;
&lt;li&gt;cost of neighboring states (randomly)&lt;/li&gt;
&lt;li&gt;find local minimum&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;constraint satisfaction - csp
&lt;ul&gt;
&lt;li&gt;backtracking search (DFS, 1 variable at a time, only legal assignments at each point)&lt;/li&gt;
&lt;li&gt;improvements
&lt;ul&gt;
&lt;li&gt;forward checking (cross off values given the current config)&lt;/li&gt;
&lt;li&gt;constraint propagation ac-3 (repeatedly enforce, arc consistency iff some valid y in head for all x in tail)&lt;/li&gt;
&lt;li&gt;variable ordering (mrv -&amp;gt; min remaining values; most degree ~ tie-breaker)&lt;/li&gt;
&lt;li&gt;value ordering (lcv -&amp;gt; least constraining value, rules out the fewest )&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;adversarial search (minimax, dls, utility)
&lt;ul&gt;
&lt;li&gt;horizon effect: unavoidable damage with a low depth limit, delay -&amp;gt; more damage&lt;/li&gt;
&lt;li&gt;$\alpha-\beta$ pruning:
&lt;ul&gt;
&lt;li&gt;$\alpha:=$ best explored option along path to root for max&lt;/li&gt;
&lt;li&gt;initialize $\alpha=-\infty, \beta=\infty$&lt;/li&gt;
&lt;li&gt;max value function: is terminal -&amp;gt; return utility value&lt;/li&gt;
&lt;li&gt;for each action, &lt;code&gt;v = max(v, min-value(s&#39;, alpha, beta))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;if $v\geq\beta$, then return $v$&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alpha=max(alpha, v)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;finally return $v$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;expectimax: replace min nodes with chance nodes by computing the weighted average of children&lt;/li&gt;
&lt;li&gt;expectiminimax: environment is an extra random agent that moves after each min/max agent&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;mdp&#34;&gt;MDP&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;MDP: S, A, T(s, a, s&amp;rsquo;) = P(s&amp;rsquo; \mid  s, a), R(s, a, s&amp;rsquo;), s0, optional terminal state&lt;/li&gt;
&lt;li&gt;stationarity (sequences with the same start state have the same order without it) implies only two ways to assign utilities to sequences
&lt;ul&gt;
&lt;li&gt;additive rewards&lt;/li&gt;
&lt;li&gt;discounted rewards&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;$V(s), Q(s, a), \pi(s)$&lt;/li&gt;
&lt;li&gt;time-limited values save computation for no / unreachable terminal states&lt;/li&gt;
&lt;li&gt;value iteration: $V_{k+1}(s)\leftarrow \max_a\sum_{s&amp;rsquo;}T(s, a, s&amp;rsquo;)[R(s, a, s&amp;rsquo;)+\gamma V_{k}(s&amp;rsquo;)]$ with $V_0=0$, repeat until convergence
&lt;ul&gt;
&lt;li&gt;slow: $O(S^2A)$ per iteration&lt;/li&gt;
&lt;li&gt;policy converges long before values&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;policy iteration: do several passes that update utilities with fixed policy; a new policy is chosen with one-step lookahead (like policy extraction)&lt;/li&gt;
&lt;li&gt;policy evaluation: utilities for a fixed policy $V^\pi(s)=\sum_{s&amp;rsquo;}T(s, \pi(s), s&amp;rsquo;)[R(s, \pi, s&amp;rsquo;) + \gamma V^\pi(s&amp;rsquo;)]$ (use method similar to value iteration as above / use linear solver since max is gone)&lt;/li&gt;
&lt;li&gt;policy extraction: (mini-)expectimax on V*, i.e. one-step lookahead / directly from Q&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;rl&#34;&gt;RL&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;TD-learning
&lt;ul&gt;
&lt;li&gt;sample = $R(s,\pi(s), s&amp;rsquo;)+\gamma V^\pi(s&amp;rsquo;)$&lt;/li&gt;
&lt;li&gt;update: $V^\pi(s)\leftarrow (1-\alpha)V^\pi(s)+\alpha[\text{sample}]$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q-learning
&lt;ul&gt;
&lt;li&gt;sample = $R(s,a,s&amp;rsquo;)+\gamma\max_{a&amp;rsquo;}Q(s&amp;rsquo;,a&amp;rsquo;)$&lt;/li&gt;
&lt;li&gt;update: $Q(s,a)\leftarrow (1-\alpha)Q(s,a)+\alpha[\text{sample}]$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;exploration function
&lt;ul&gt;
&lt;li&gt;epsilon-greedy: explore a fixed amount&lt;/li&gt;
&lt;li&gt;explore areas whose badness is not (yet) established, eventually stop exploring&lt;/li&gt;
&lt;li&gt;$f(u,n)=u+k/n$&lt;/li&gt;
&lt;li&gt;$Q(s,a)\leftarrow R(s,a,s&amp;rsquo;)+\gamma\max_{a&amp;rsquo;}f(Q(s&amp;rsquo;,a&amp;rsquo;),N(s&amp;rsquo;,a&amp;rsquo;))$&lt;/li&gt;
&lt;li&gt;propagate bonus back to states that lead to unknown states&lt;/li&gt;
&lt;li&gt;minimize regret (difference between rewards and optimal rewards)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;approximate Q-learning
&lt;ul&gt;
&lt;li&gt;weights $w_i$ and features $f_i$, linear combination&lt;/li&gt;
&lt;li&gt;difference = $[r+\gamma\max_{a&amp;rsquo;}Q(s&amp;rsquo;,a&amp;rsquo;)]-Q(s,a)$&lt;/li&gt;
&lt;li&gt;update: $w_i\leftarrow w_i+\alpha[\text{difference}]f_i(s,a)$&lt;/li&gt;
&lt;li&gt;pro: experience is summed up in a few powerful numbers&lt;/li&gt;
&lt;li&gt;con: states may share features but actually be very different in value&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;mm&#34;&gt;MM&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;mini-forward algorithm: time t-1 to t&lt;/li&gt;
&lt;li&gt;stationary distributions $P_\infty(X)$&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;hmm&#34;&gt;HMM&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;definition
&lt;ul&gt;
&lt;li&gt;initial distribution $P(X_1)$&lt;/li&gt;
&lt;li&gt;transitions $P(X_t \mid  X_{t-1})$&lt;/li&gt;
&lt;li&gt;emissions $P(E_t \mid  X_t)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;belief state $B_t(X)=P(X_t\mid e_1,\dots,e_t)=P(X_t\mid e_{1:t})$
&lt;ul&gt;
&lt;li&gt;passage of time: $B&amp;rsquo;(X_{t+1}):=P(X_{t+1}\mid e_{i:t})=\sum_{x_t}P(X_{t+1}\mid x_t)B(x_t)$&lt;/li&gt;
&lt;li&gt;$B(X_{t+1})\propto P(e_{t+1}\mid X_{t+1})B&amp;rsquo;(X_{t+1})$&lt;/li&gt;
&lt;li&gt;then renormalize $\to$ beliefs reweighted by likelihood of evidence&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;particle filtering
&lt;ul&gt;
&lt;li&gt;comes in when the dimension of X too big to use exact inference (e.g. continuous)&lt;/li&gt;
&lt;li&gt;elapse time: $x&amp;rsquo;=\text{sample}(P(X&amp;rsquo;\mid x))$&lt;/li&gt;
&lt;li&gt;observe: $w(x)=P(e\mid x),\ B(x)\propto P(e\mid x)B&amp;rsquo;(X)$ then renormalize&lt;/li&gt;
&lt;li&gt;resample: select prior samples in proportion to their likelihood&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;forward algorithm (sum of paths)
&lt;ul&gt;
&lt;li&gt;$f_t[x_t]=P(x_t,e_{1:t})=P(e_t\mid x_t)\sum_{x_{t-1}}P(x_t\mid x_{t-1})f_{t-1}[x_{t-1}]$&lt;/li&gt;
&lt;li&gt;get most likely explanation by taking argmax over $x_t$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Viterbi algorithm (best path)
&lt;ul&gt;
&lt;li&gt;take max instead of sum&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;bayes-nets&#34;&gt;Bayes Nets&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;conditional independence: d-separation&lt;img src=&#34;https://wwwCielwww.github.io/p/comp3270/d-sep.png&#34;
	width=&#34;1391&#34;
	height=&#34;747&#34;
	srcset=&#34;https://wwwCielwww.github.io/p/comp3270/d-sep_hue99864bf8bedf15fec96970e91ab330d_103777_480x0_resize_box_3.png 480w, https://wwwCielwww.github.io/p/comp3270/d-sep_hue99864bf8bedf15fec96970e91ab330d_103777_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;186&#34;
		data-flex-basis=&#34;446px&#34;
	
&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;nlp&#34;&gt;NLP&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;word2vec
&lt;ul&gt;
&lt;li&gt;iterate through every word of the whole corpus&lt;/li&gt;
&lt;li&gt;predict surrounding words using word vectors
&lt;ul&gt;
&lt;li&gt;$P(o\mid c)=\frac{\exp(u^T_ov_c)}{\sum_{w\in V}\exp(u_w^Tv_c)}$&lt;/li&gt;
&lt;li&gt;$J(\theta)$ cost function, a sum of negative log probabilities&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;gradient descent: update all $\theta$ using all windows&lt;/li&gt;
&lt;li&gt;stochastic gradient descent
&lt;ul&gt;
&lt;li&gt;repeatedly sample windows, and update after each one&lt;/li&gt;
&lt;li&gt;$\nabla J(\theta)\in \mathbb{R}^{2dV}$ is sparse (2dV as every word can appear as a center or context word)&lt;/li&gt;
&lt;li&gt;update at most 2m+1 word vectors&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>Archives</title>
        <link>https://wwwCielwww.github.io/archives/</link>
        <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
        
        <guid>https://wwwCielwww.github.io/archives/</guid>
        <description></description>
        </item>
        <item>
        <title>Markdown Syntax Guide</title>
        <link>https://wwwCielwww.github.io/p/markdown-syntax-guide/</link>
        <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
        
        <guid>https://wwwCielwww.github.io/p/markdown-syntax-guide/</guid>
        <description>&lt;img src="https://wwwCielwww.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post Markdown Syntax Guide" /&gt;&lt;p&gt;This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p&gt;
&lt;h2 id=&#34;headings&#34;&gt;Headings&lt;/h2&gt;
&lt;p&gt;The following HTML &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;—&lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; elements represent six levels of section headings. &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; is the highest section level while &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; is the lowest.&lt;/p&gt;
&lt;h1 id=&#34;h1&#34;&gt;H1&lt;/h1&gt;
&lt;h2 id=&#34;h2&#34;&gt;H2&lt;/h2&gt;
&lt;h3 id=&#34;h3&#34;&gt;H3&lt;/h3&gt;
&lt;h4 id=&#34;h4&#34;&gt;H4&lt;/h4&gt;
&lt;h5 id=&#34;h5&#34;&gt;H5&lt;/h5&gt;
&lt;h6 id=&#34;h6&#34;&gt;H6&lt;/h6&gt;
&lt;h2 id=&#34;paragraph&#34;&gt;Paragraph&lt;/h2&gt;
&lt;p&gt;Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.&lt;/p&gt;
&lt;p&gt;Itatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.&lt;/p&gt;
&lt;h2 id=&#34;blockquotes&#34;&gt;Blockquotes&lt;/h2&gt;
&lt;p&gt;The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a &lt;code&gt;footer&lt;/code&gt; or &lt;code&gt;cite&lt;/code&gt; element, and optionally with in-line changes such as annotations and abbreviations.&lt;/p&gt;
&lt;h4 id=&#34;blockquote-without-attribution&#34;&gt;Blockquote without attribution&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Tiam, ad mint andaepu dandae nostion secatur sequo quae.
&lt;strong&gt;Note&lt;/strong&gt; that you can use &lt;em&gt;Markdown syntax&lt;/em&gt; within a blockquote.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;blockquote-with-attribution&#34;&gt;Blockquote with attribution&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Don&amp;rsquo;t communicate by sharing memory, share memory by communicating.&lt;!-- raw HTML omitted --&gt;
— &lt;!-- raw HTML omitted --&gt;Rob Pike&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;tables&#34;&gt;Tables&lt;/h2&gt;
&lt;p&gt;Tables aren&amp;rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Age&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Bob&lt;/td&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alice&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;inline-markdown-within-tables&#34;&gt;Inline Markdown within tables&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Italics&lt;/th&gt;
&lt;th&gt;Bold&lt;/th&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;italics&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;bold&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;code&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;A&lt;/th&gt;
&lt;th&gt;B&lt;/th&gt;
&lt;th&gt;C&lt;/th&gt;
&lt;th&gt;D&lt;/th&gt;
&lt;th&gt;E&lt;/th&gt;
&lt;th&gt;F&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/td&gt;
&lt;td&gt;Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex.&lt;/td&gt;
&lt;td&gt;Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus&lt;/td&gt;
&lt;td&gt;Proin sit amet velit nec enim imperdiet vehicula.&lt;/td&gt;
&lt;td&gt;Ut bibendum vestibulum quam, eu egestas turpis gravida nec&lt;/td&gt;
&lt;td&gt;Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;code-blocks&#34;&gt;Code Blocks&lt;/h2&gt;
&lt;h4 id=&#34;code-block-with-backticks&#34;&gt;Code block with backticks&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Example HTML5 Document&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Test&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;code-block-indented-with-four-spaces&#34;&gt;Code block indented with four spaces&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
  &amp;lt;title&amp;gt;Example HTML5 Document&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;p&amp;gt;Test&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;code-block-with-hugos-internal-highlight-shortcode&#34;&gt;Code block with Hugo&amp;rsquo;s internal highlight shortcode&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Example HTML5 Document&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Test&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;diff-code-block&#34;&gt;Diff code block&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[dependencies.bevy]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git = &amp;#34;https://github.com/bevyengine/bevy&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;rev = &amp;#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gd&#34;&gt;- features = [&amp;#34;dynamic&amp;#34;]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gd&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+ features = [&amp;#34;jpeg&amp;#34;, &amp;#34;dynamic&amp;#34;]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;list-types&#34;&gt;List Types&lt;/h2&gt;
&lt;h4 id=&#34;ordered-list&#34;&gt;Ordered List&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;First item&lt;/li&gt;
&lt;li&gt;Second item&lt;/li&gt;
&lt;li&gt;Third item&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;unordered-list&#34;&gt;Unordered List&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;List item&lt;/li&gt;
&lt;li&gt;Another item&lt;/li&gt;
&lt;li&gt;And another item&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;nested-list&#34;&gt;Nested list&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Fruit
&lt;ul&gt;
&lt;li&gt;Apple&lt;/li&gt;
&lt;li&gt;Orange&lt;/li&gt;
&lt;li&gt;Banana&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dairy
&lt;ul&gt;
&lt;li&gt;Milk&lt;/li&gt;
&lt;li&gt;Cheese&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;other-elements--abbr-sub-sup-kbd-mark&#34;&gt;Other Elements — abbr, sub, sup, kbd, mark&lt;/h2&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;GIF&lt;!-- raw HTML omitted --&gt; is a bitmap image format.&lt;/p&gt;
&lt;p&gt;H&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt;O&lt;/p&gt;
&lt;p&gt;X&lt;!-- raw HTML omitted --&gt;n&lt;!-- raw HTML omitted --&gt; + Y&lt;!-- raw HTML omitted --&gt;n&lt;!-- raw HTML omitted --&gt; = Z&lt;!-- raw HTML omitted --&gt;n&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Press &lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;CTRL&lt;!-- raw HTML omitted --&gt;+&lt;!-- raw HTML omitted --&gt;ALT&lt;!-- raw HTML omitted --&gt;+&lt;!-- raw HTML omitted --&gt;Delete&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt; to end the session.&lt;/p&gt;
&lt;p&gt;Most &lt;!-- raw HTML omitted --&gt;salamanders&lt;!-- raw HTML omitted --&gt; are nocturnal, and hunt for insects, worms, and other small creatures.&lt;/p&gt;
&lt;h2 id=&#34;hyperlinked-image&#34;&gt;Hyperlinked image&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://google.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;img src=&#34;https://www.google.com/images/branding/googlelogo/1x/googlelogo_light_color_272x92dp.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Google&#34;
	
	
&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;The above quote is excerpted from Rob Pike&amp;rsquo;s &lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=PAAkCSZUG1c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;talk&lt;/a&gt; during Gopherfest, November 18, 2015.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>Rich Content</title>
        <link>https://wwwCielwww.github.io/p/rich-content/</link>
        <pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate>
        
        <guid>https://wwwCielwww.github.io/p/rich-content/</guid>
        <description>&lt;p&gt;Hugo ships with several &lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/content-management/shortcodes/#use-hugo-s-built-in-shortcodes&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Built-in Shortcodes&lt;/a&gt; for rich content, along with a &lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/about/hugo-and-gdpr/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Privacy Config&lt;/a&gt; and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;youtube-privacy-enhanced-shortcode&#34;&gt;YouTube Privacy Enhanced Shortcode&lt;/h2&gt;
&lt;div class=&#34;video-wrapper&#34;&gt;
    &lt;iframe loading=&#34;lazy&#34; 
            src=&#34;https://www.youtube.com/embed/ZJthWmvUzzc&#34; 
            allowfullscreen 
            title=&#34;YouTube Video&#34;
    &gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;!-- raw HTML omitted --&gt;
&lt;hr&gt;
&lt;h2 id=&#34;twitter-simple-shortcode&#34;&gt;Twitter Simple Shortcode&lt;/h2&gt;

    &lt;style type=&#34;text/css&#34;&gt;
      .twitter-tweet {
        font: 14px/1.45 -apple-system,BlinkMacSystemFont,&#34;Segoe UI&#34;,Roboto,Oxygen-Sans,Ubuntu,Cantarell,&#34;Helvetica Neue&#34;,sans-serif;
        border-left: 4px solid #2b7bb9;
        padding-left: 1.5em;
        color: #555;
      }
      .twitter-tweet a {
        color: #2b7bb9;
        text-decoration: none;
      }
      blockquote.twitter-tweet a:hover,
      blockquote.twitter-tweet a:focus {
        text-decoration: underline;
      }
    &lt;/style&gt;
  &lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;“In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”&lt;br&gt;— Jan Tschichold &lt;a href=&#34;https://t.co/gcv7SrhvJb&#34;&gt;pic.twitter.com/gcv7SrhvJb&lt;/a&gt;&lt;/p&gt;&amp;mdash; Graphic Design History (@DesignReviewed) &lt;a href=&#34;https://twitter.com/DesignReviewed/status/1085870671291310081?ref_src=twsrc%5Etfw&#34;&gt;January 17, 2019&lt;/a&gt;&lt;/blockquote&gt;

&lt;!-- raw HTML omitted --&gt;
&lt;hr&gt;
&lt;h2 id=&#34;vimeo-simple-shortcode&#34;&gt;Vimeo Simple Shortcode&lt;/h2&gt;






&lt;style&gt;
.__h_video {
   position: relative;
   padding-bottom: 56.23%;
   height: 0;
   overflow: hidden;
   width: 100%;
   background: #000;
}
.__h_video img {
   width: 100%;
   height: auto;
   color: #000;
}
.__h_video .play {
   height: 72px;
   width: 72px;
   left: 50%;
   top: 50%;
   margin-left: -36px;
   margin-top: -36px;
   position: absolute;
   cursor: pointer;
}
&lt;/style&gt;


&lt;div class=&#34;s_video_simple __h_video&#34;&gt;
&lt;a href=&#34;https://vimeo.com/4.8912912e&amp;#43;07&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;


&lt;img src=&#34;https://i.vimeocdn.com/video/337401969-979f0cc9f55fdf305fb8984e90d92639ec9d7ecc4c9dfbc6536e28edb43784ce-d_640&#34; srcset=&#34;https://i.vimeocdn.com/video/337401969-979f0cc9f55fdf305fb8984e90d92639ec9d7ecc4c9dfbc6536e28edb43784ce-d_640 1x, https://i.vimeocdn.com/video/337401969-979f0cc9f55fdf305fb8984e90d92639ec9d7ecc4c9dfbc6536e28edb43784ce-d_640 2x&#34; alt=&#34;Sing Jan Swing - Kinetic Type&#34;&gt;
&lt;div class=&#34;play&#34;&gt;&lt;svg version=&#34;1&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;0 0 61 61&#34;&gt;&lt;circle cx=&#34;30.5&#34; cy=&#34;30.5&#34; r=&#34;30.5&#34; opacity=&#34;.8&#34; fill=&#34;#000&#34;&gt;&lt;/circle&gt;&lt;path d=&#34;M25.3 19.2c-2.1-1.2-3.8-.2-3.8 2.2v18.1c0 2.4 1.7 3.4 3.8 2.2l16.6-9.1c2.1-1.2 2.1-3.2 0-4.4l-16.6-9z&#34; fill=&#34;#fff&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/a&gt;&lt;/div&gt;
&lt;h2 id=&#34;bilibilibi-shortcode&#34;&gt;bilibilibi Shortcode&lt;/h2&gt;






    


&lt;div class=&#34;video-wrapper&#34;&gt;
    &lt;iframe src=&#34;https://player.bilibili.com/player.html?as_wide=1&amp;amp;high_quality=1&amp;amp;page=1&amp;aid=498363026&#34;
            scrolling=&#34;no&#34;
            frameborder=&#34;no&#34;
            framespacing=&#34;0&#34;
            allowfullscreen=&#34;true&#34;
    &gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;gist-shortcode&#34;&gt;Gist Shortcode&lt;/h2&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/spf13/7896402.js&#34;&gt;&lt;/script&gt;</description>
        </item>
        <item>
        <title>Placeholder Text</title>
        <link>https://wwwCielwww.github.io/p/placeholder-text/</link>
        <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
        
        <guid>https://wwwCielwww.github.io/p/placeholder-text/</guid>
        <description>&lt;img src="https://wwwCielwww.github.io/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash.jpg" alt="Featured image of post Placeholder Text" /&gt;&lt;p&gt;Lorem est tota propiore conpellat pectoribus de pectora summo.&lt;/p&gt;
&lt;p&gt;Redit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Exierant elisi ambit vivere dedere&lt;/li&gt;
&lt;li&gt;Duce pollice&lt;/li&gt;
&lt;li&gt;Eris modo&lt;/li&gt;
&lt;li&gt;Spargitque ferrea quos palude&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Comas hunc haec pietate fetum procerum dixit&lt;/li&gt;
&lt;li&gt;Post torum vates letum Tiresia&lt;/li&gt;
&lt;li&gt;Flumen querellas&lt;/li&gt;
&lt;li&gt;Arcanaque montibus omnes&lt;/li&gt;
&lt;li&gt;Quidem et&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;vagus-elidunt&#34;&gt;Vagus elidunt&lt;/h1&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Canons_of_page_construction#Van_de_Graaf_canon&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;The Van de Graaf Canon&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;mane-refeci-capiebant-unda-mulcebat&#34;&gt;Mane refeci capiebant unda mulcebat&lt;/h2&gt;
&lt;p&gt;Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. &lt;strong&gt;Faces illo pepulere&lt;/strong&gt; tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.&lt;/p&gt;
&lt;p&gt;Iubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.&lt;/p&gt;
&lt;p&gt;Eurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel &lt;strong&gt;mitis temploque&lt;/strong&gt; vocatus, inque alis, &lt;em&gt;oculos nomen&lt;/em&gt; non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides &lt;strong&gt;parte&lt;/strong&gt;.&lt;/p&gt;</description>
        </item>
        <item>
        <title>Math Typesetting</title>
        <link>https://wwwCielwww.github.io/p/math-typesetting/</link>
        <pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate>
        
        <guid>https://wwwCielwww.github.io/p/math-typesetting/</guid>
        <description>&lt;p&gt;Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.&lt;/p&gt;
&lt;p&gt;In this example we will be using &lt;a class=&#34;link&#34; href=&#34;https://katex.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;KaTeX&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a partial under &lt;code&gt;/layouts/partials/math.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Within this partial reference the &lt;a class=&#34;link&#34; href=&#34;https://katex.org/docs/autorender.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Auto-render Extension&lt;/a&gt; or host these scripts locally.&lt;/li&gt;
&lt;li&gt;Include the partial in your templates like so:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; or .Params.math .Site.Params.math &lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;{{&lt;/span&gt; partial &lt;span class=&#34;s2&#34;&gt;&amp;#34;math.html&amp;#34;&lt;/span&gt; . &lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;{{&lt;/span&gt; end &lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;To enable KaTex globally set the parameter &lt;code&gt;math&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in a project&amp;rsquo;s configuration&lt;/li&gt;
&lt;li&gt;To enable KaTex on a per page basis include the parameter &lt;code&gt;math: true&lt;/code&gt; in content files&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Use the online reference of &lt;a class=&#34;link&#34; href=&#34;https://katex.org/docs/supported.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Supported TeX Functions&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;

&lt;p&gt;Block math:
$$
\varphi = 1+\frac{1} {1+\frac{1} {1+\frac{1} {1+\cdots} } }
$$&lt;/p&gt;</description>
        </item>
        <item>
        <title>Emoji Support</title>
        <link>https://wwwCielwww.github.io/p/emoji-support/</link>
        <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
        
        <guid>https://wwwCielwww.github.io/p/emoji-support/</guid>
        <description>&lt;img src="https://wwwCielwww.github.io/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash.jpg" alt="Featured image of post Emoji Support" /&gt;&lt;p&gt;Emoji can be enabled in a Hugo project in a number of ways.&lt;/p&gt;
&lt;p&gt;The &lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/functions/emojify/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;code&gt;emojify&lt;/code&gt;&lt;/a&gt; function can be called directly in templates or &lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/templates/shortcode-templates/#inline-shortcodes&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Inline Shortcodes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To enable emoji globally, set &lt;code&gt;enableEmoji&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in your site&amp;rsquo;s &lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/getting-started/configuration/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;configuration&lt;/a&gt; and then you can type emoji shorthand codes directly in content files; e.g.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;The &lt;a class=&#34;link&#34; href=&#34;http://www.emoji-cheat-sheet.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Emoji cheat sheet&lt;/a&gt; is a useful reference for emoji shorthand codes.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.emoji {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>About</title>
        <link>https://wwwCielwww.github.io/about/</link>
        <pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate>
        
        <guid>https://wwwCielwww.github.io/about/</guid>
        <description>&lt;p&gt;Written in Go, Hugo is an open source static site generator available under the &lt;a class=&#34;link&#34; href=&#34;https://github.com/gohugoio/hugo/blob/master/LICENSE&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Apache Licence 2.0.&lt;/a&gt; Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.&lt;/p&gt;
&lt;p&gt;Hugo makes use of a variety of open source projects including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/yuin/goldmark&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/yuin/goldmark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/alecthomas/chroma&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/alecthomas/chroma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/muesli/smartcrop&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/muesli/smartcrop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/spf13/cobra&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/spf13/cobra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/spf13/viper&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/spf13/viper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hugo is ideal for blogs, corporate websites, creative portfolios, online magazines, single page applications or even a website with thousands of pages.&lt;/p&gt;
&lt;p&gt;Hugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.&lt;/p&gt;
&lt;p&gt;Websites built with Hugo are extremelly fast, secure and can be deployed anywhere including, AWS, GitHub Pages, Heroku, Netlify and any other hosting provider.&lt;/p&gt;
&lt;p&gt;Learn more and contribute on &lt;a class=&#34;link&#34; href=&#34;https://github.com/gohugoio&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Links</title>
        <link>https://wwwCielwww.github.io/links/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://wwwCielwww.github.io/links/</guid>
        <description>&lt;p&gt;To use this feature, add &lt;code&gt;links&lt;/code&gt; section to frontmatter.&lt;/p&gt;
&lt;p&gt;This page&amp;rsquo;s frontmatter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;links&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;GitHub is the world&amp;#39;s largest software development platform.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;website&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https://github.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TypeScript&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;website&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https://www.typescriptlang.org&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ts-logo-128.jpg&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;image&lt;/code&gt; field accepts both local and external images.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Search</title>
        <link>https://wwwCielwww.github.io/search/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://wwwCielwww.github.io/search/</guid>
        <description></description>
        </item>
        
    </channel>
</rss>
